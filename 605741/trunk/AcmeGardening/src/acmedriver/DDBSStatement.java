package acmedriver;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/*
 * <P>A Statement object is used for executing a static SQL statement
 * and obtaining the results produced by it. 
 *
 * <P>Only one ResultSet per Statement can be open at any point in
 * time. Therefore, if the reading of one ResultSet is interleaved
 * with the reading of another, each must have been generated by
 * different Statements. All statement execute methods implicitly
 * close a statment's current ResultSet if an open one exists.
 *
 * @see Connection#createStatement
 * @see ResultSet 
 */
public class DDBSStatement implements Statement {
	Connection oracleConn; 
	Connection mysqlConn; 

    /**
     * Constructor
     */
    public DDBSStatement(Connection oracle, Connection mysql) {
    	this.oracleConn = oracle; 
    	this.mysqlConn = mysql; 
    }
    
    ////////////////////////////////////////////////////////////////////////
    //
    // Implementation of JDBC Statement interface
    //
    
    /**
     * JDBC 2.0
     *
     * Adds a SQL command to the current batch of commmands for the statement.
     * This method is optional.
     *
     * @param sql typically this is a static SQL INSERT or UPDATE statement
     * @exception SQLException if a database access error occurs, or the
     * driver does not support batch statements
     */
    public void addBatch(String sql) throws SQLException {
    }
    /**
     * Cancel can be used by one thread to cancel a statement that
     * is being executed by another thread.
     *
     * @exception SQLException if a database-access error occurs.
     */
    public void cancel() throws SQLException {
    }
    /**
     * JDBC 2.0
     *
     * Makes the set of commands in the current batch empty.
     * This method is optional.
     *
     * @exception SQLException if a database access error occurs or the
     * driver does not support batch statements
     */
    public void clearBatch() throws SQLException {
    }
    /**
     * After this call, getWarnings returns null until a new warning is
     * reported for this Statement.  
     *
     * @exception SQLException if a database-access error occurs.
     */
    public void clearWarnings() throws SQLException {
    }
    /**
     * In many cases, it is desirable to immediately release a
     * Statements's database and JDBC resources instead of waiting for
     * this to happen when it is automatically closed; the close
     * method provides this immediate release.
     *
     * <P><B>Note:</B> A Statement is automatically closed when it is
     * garbage collected. When a Statement is closed, its current
     * ResultSet, if one exists, is also closed.  
     *
     * @exception SQLException if a database-access error occurs.
     */
    public void close() throws SQLException {
    }
    //----------------------- Multiple Results --------------------------

    /**
     * Execute a SQL statement that may return multiple results.
     * Under some (uncommon) situations a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this, unless you're executing a stored procedure that you know may
     * return multiple results, or unless you're dynamically executing an
     * unknown SQL string.  The "execute", "getMoreResults", "getResultSet"
     * and "getUpdateCount" methods let you navigate through multiple results.
     *
     * The "execute" method executes a SQL statement and indicates the
     * form of the first result.  You can then use getResultSet or
     * getUpdateCount to retrieve the result, and getMoreResults to
     * move to any subsequent result(s).
     *
     * @param sql any SQL statement
     * @return true if the next result is a ResultSet; false if it is
     * an update count or there are no more results
     * @exception SQLException if a database-access error occurs.
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults 
     */
    public boolean execute(String sql) throws SQLException {
        return false;
    }

   public boolean execute(String sql, int i) {
      return false;
   }

   public boolean execute(String sql, int[] ia) { return false; }
   public boolean execute(String sql, String[] sa) { return false; }

    /**
     * JDBC 2.0
     * 
     * Submits a batch of commands to the database for execution.
     * This method is optional.
     *
     * @return an array of update counts containing one element for each
     * command in the batch.  The array is ordered according 
     * to the order in which commands were inserted into the batch.
     * @exception SQLException if a database access error occurs or the
     * driver does not support batch statements
     */
    public int[] executeBatch() throws SQLException {
	return new int[0];
    }
    
    public ResultSet performSemiJoin() throws SQLException { 
    	try { oracleConn.createStatement().executeUpdate("DROP TABLE tempTable"); } catch (Exception e) { }
    	try { oracleConn.createStatement().executeUpdate("DROP TABLE bPrime"); } catch (Exception e) { } 
    	try { mysqlConn.createStatement().executeUpdate("DROP TABLE aPrime"); } catch (Exception e) { } 
    	String joinOrderAndCust = "SELECT * FROM orders, customers WHERE orders.cust_id = customers.cust_id";
    	Statement s = oracleConn.createStatement();
    	ResultSet orderCust = s.executeQuery(joinOrderAndCust);
    	
    	String buildTempTable = "CREATE TABLE tempTable (" +
        	"cust_id INT NOT NULL ," +
        	"lastname varchar(20)," +
        	"firstname varchar(20)," +
        	"address varchar(60)," +
        	"city varchar(20)," +
        	"state varchar(2)," +
        	"zip integer," +
        	"item_no integer," +
            "qty integer, " +
        	"PRIMARY KEY(cust_id, item_no)" +
        ")";
    	oracleConn.createStatement().executeUpdate(buildTempTable);
    	
        while(orderCust.next())
        {
        	String insertIntoTempTable = "INSERT INTO tempTable (" +
                    "cust_id, lastname, firstname, address, " +
                    "city, state, zip, item_no, qty) VALUES (" +
                    ""  + orderCust.getInt("cust_id") + "," +  
                    "'" + orderCust.getString("lastname") + "'," +
                    "'" +  orderCust.getString("firstname") + "'," +
                    "'" +  orderCust.getString("address") + "'," +
                    "'" + orderCust.getString("city") + "'," +
                    "'" +  orderCust.getString("state") + "'," +
                    ""  + orderCust.getInt("zip") + "," + 
                    ""  + orderCust.getInt("item_no") + "," + 
                    ""  + orderCust.getInt("qty") +                     
                    ")";
                
        	oracleConn.createStatement().executeUpdate(insertIntoTempTable);      
        }
    	
    	//Build Temporary Table with R
    	
    	String selectDistinctItemNo = "SELECT DISTINCT item_no FROM tempTable";
    	ResultSet aPrime = oracleConn.createStatement().executeQuery(selectDistinctItemNo);
    	
    	//Send aPrime to MYSQL
    	String createTable = "CREATE TABLE aPrime (" +
    			"item_no INT, " +
    			"PRIMARY KEY (item_no)" +
    		")"; 
    	mysqlConn.createStatement().executeUpdate(createTable); 
    	while (aPrime.next()) { 
    		String insertIntoAPrime = "INSERT INTO aPrime (item_no) VALUES (" + 
    			aPrime.getInt("item_no") + ")";
    		mysqlConn.createStatement().executeUpdate(insertIntoAPrime);
    	}
    	
    	
    	//Join A' with ITems table
    	String aPrimeItems = "SELECT * FROM items, aPrime WHERE items.item_no = aPrime.item_no";
    	ResultSet bPrime = mysqlConn.createStatement().executeQuery(aPrimeItems); 
    	
    	
    	//Create BPrime on Oracle 
    	String createbPrime = "CREATE TABLE bPrime (" +
                "item_no INT NOT NULL ," +
                "item_name varchar(20), " +
                "price integer, " +
                "PRIMARY KEY(item_no)" +
                ")";
    	oracleConn.createStatement().executeUpdate(createbPrime); 
    	
    	while(bPrime.next()) { 
    		String insertIntoBPrime = "INSERT INTO bPrime (item_no,  " +
    				"item_name, price) VALUES (" +
    				"" + bPrime.getInt("item_no") + "," + 
                    "'" + bPrime.getString("item_name") + "'," +
                    "" + bPrime.getInt("price") +
    				")"; 
    		oracleConn.createStatement().executeUpdate(insertIntoBPrime); 
    	}
    	
    	//Final Join on Oracle 
    	String finalJoin = "SELECT * FROM tempTable, bPrime WHERE " +
    			"tempTable.item_no = bPrime.item_no";
    	ResultSet finalResults = oracleConn.createStatement().executeQuery(finalJoin); 
    	
    	acmegardening.IntermediateResults ir = 
    		new acmegardening.IntermediateResults(null, true,
    				oracleConn.createStatement().executeQuery(selectDistinctItemNo), 
    				mysqlConn.createStatement().executeQuery(aPrimeItems));
    	ir.setVisible(true); 
    	
    	//Clean up aPrime, bPrime, tempTable
    	try { oracleConn.createStatement().executeUpdate("DROP TABLE tempTable"); } catch (Exception e) { }
    	try { oracleConn.createStatement().executeUpdate("DROP TABLE bPrime"); } catch (Exception e) { } 
    	try { mysqlConn.createStatement().executeUpdate("DROP TABLE aPrime"); } catch (Exception e) { }
  

    	
    	return finalResults; 
    }
    /**
     * Execute a SQL statement that returns a single ResultSet.
     *
     * @param sql typically this is a static SQL SELECT statement
     * @return a ResultSet that contains the data produced by the
     * query; never null 
     * @exception SQLException if a database-access error occurs.
     */
    public ResultSet executeQuery(String sql) throws SQLException {
    	if (sql.toLowerCase().contains("inner join")) {    		
    		return performSemiJoin();     		
    	} else if (sql.contains("customers") || sql.contains("orders"))  {
    		System.out.println("Oracle");   
    		return oracleConn.createStatement().executeQuery(sql);     		 		
    	}    		
    	else {
    		System.out.println("MySql");
    		return mysqlConn.createStatement().executeQuery(sql); 
    	}
    	 
    }
    /**
     * Execute a SQL INSERT, UPDATE or DELETE statement. In addition,
     * SQL statements that return nothing such as SQL DDL statements
     * can be executed.
     *
     * @param sql a SQL INSERT, UPDATE or DELETE statement or a SQL
     * statement that returns nothing
     * @return either the row count for INSERT, UPDATE or DELETE or 0
     * for SQL statements that return nothing
     * @exception SQLException if a database-access error occurs.
     */
    public int executeUpdate(String sql) throws SQLException {
    	if (sql.contains("customers") || sql.contains("orders"))  {
    		System.out.println("Oracle");   
    		return oracleConn.createStatement().executeUpdate(sql);     		 		
    	}    		
    	else {
    		System.out.println("MySql");
    		return mysqlConn.createStatement().executeUpdate(sql); 
    	}
    }

   public int executeUpdate(String sql, int i) {
      return 0;
   }

   public int executeUpdate(String sql, int[] ia) {
      return 0;
   }

   public int executeUpdate(String sql, String[] sa) {
      return 0;
   }

   public ResultSet getGeneratedKeys() {
      return null;
   }

    /**
     * JDBC 2.0
     * 
     * Returns the <code>Connection</code> object
     * that produced this <code>Statement</code> object.
     * @return the connection that produced this statement
     * @exception SQLException if a database access error occurs
     */
    public Connection getConnection() throws SQLException {
	return null;
    }
    /**
     * JDBC 2.0
     *
     * Retrieves the direction for fetching rows from
     * database tables that is the default for result sets
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch direction by calling the method <code>setFetchDirection</code>,
     * the return value is implementation-specific.
     *
     * @return the default fetch direction for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs
     */
    public int getFetchDirection() throws SQLException {
	return 0;
    }
    /**
     * JDBC 2.0
     *
     * Retrieves the number of result set rows that is the default 
     * fetch size for result sets
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch size by calling the method <code>setFetchSize</code>,
     * the return value is implementation-specific.
     * @return the default fetch size for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs
     */
    public int getFetchSize() throws SQLException {
	return 0;
    }
    //----------------------------------------------------------------------

    /**
     * The maxFieldSize limit (in bytes) is the maximum amount of data
     * returned for any column value; it only applies to BINARY,
     * VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
     * columns.  If the limit is exceeded, the excess data is silently
     * discarded.
     *
     * @return the current max column size limit; zero means unlimited 
     * @exception SQLException if a database-access error occurs.
     */
    public int getMaxFieldSize() throws SQLException {
	// Get the maximum field size
	return 0; // for now
    }
    /**
     * The maxRows limit is the maximum number of rows that a
     * ResultSet can contain.  If the limit is exceeded, the excess
     * rows are silently dropped.
     *
     * @return the current max row limit; zero means unlimited
     * @exception SQLException if a database-access error occurs.
     */
    public int getMaxRows() throws SQLException {
	return 0;
    }
    /**
     * getMoreResults moves to a Statement's next result.  It returns true if 
     * this result is a ResultSet.  getMoreResults also implicitly
     * closes any current ResultSet obtained with getResultSet.
     *
     * There are no more results when (!getMoreResults() &&
     * (getUpdateCount() == -1)
     *
     * @return true if the next result is a ResultSet; false if it is
     * an update count or there are no more results
     * @exception SQLException if a database-access error occurs.
     * @see #execute 
     */
    public boolean getMoreResults() throws SQLException {
	return false; // for now
    }

   public boolean getMoreResults(int i) { return false; }

    /**
     * The queryTimeout limit is the number of seconds the driver will
     * wait for a Statement to execute. If the limit is exceeded, a
     * SQLException is thrown.
     *
     * @return the current query timeout limit in seconds; zero means unlimited 
     * @exception SQLException if a database-access error occurs.
     */
    public int getQueryTimeout() throws SQLException {
	return 0;
    }
    /**
     *  getResultSet returns the current result as a ResultSet.  It
     *  should only be called once per result.
     *
     * @return the current result as a ResultSet; null if the result
     * is an update count or there are no more results
     * @exception SQLException if a database-access error occurs.
     * @see #execute 
     */
    public ResultSet getResultSet() throws SQLException {
        return null;
    }

   public int getResultSetHoldability() { return 0; }

    /**
     * JDBC 2.0
     *
     * Retrieves the result set concurrency.
     */
    public int getResultSetConcurrency() throws SQLException {
	return 0;
    }
    /**
     * JDBC 2.0
     *
     * Determine the result set type.
     */
    public int getResultSetType() throws SQLException {
	return 0;
    }
    /**
     *  getUpdateCount returns the current result as an update count;
     *  if the result is a ResultSet or there are no more results, -1
     *  is returned.  It should only be called once per result.
     * 
     * @return the current result as an update count; -1 if it is a
     * ResultSet or there are no more results
     * @exception SQLException if a database-access error occurs.
     * @see #execute 
     */
    public int getUpdateCount() throws SQLException {
	return 0;
    }
    /**
     * The first warning reported by calls on this Statement is
     * returned.  A Statment's execute methods clear its SQLWarning
     * chain. Subsequent Statement warnings will be chained to this
     * SQLWarning.
     *
     * <p>The warning chain is automatically cleared each time
     * a statement is (re)executed.
     *
     * <P><B>Note:</B> If you are processing a ResultSet then any
     * warnings associated with ResultSet reads will be chained on the
     * ResultSet object.
     *
     * @return the first SQLWarning or null 
     * @exception SQLException if a database-access error occurs.
     */
    public SQLWarning getWarnings() throws SQLException {
	return null;
    }
    public void resultSetCloseEventCallback() throws SQLException {
    }
    /**
     * setCursorname defines the SQL cursor name that will be used by
     * subsequent Statement execute methods. This name can then be
     * used in SQL positioned update/delete statements to identify the
     * current row in the ResultSet generated by this statement.  If
     * the database doesn't support positioned update/delete, this
     * method is a noop.
     *
     * <P><B>Note:</B> By definition, positioned update/delete
     * execution must be done by a different Statement than the one
     * which generated the ResultSet being used for positioning. Also,
     * cursor names must be unique within a Connection.
     *
     * @param name the new cursor name.  
     * @exception SQLException if a database-access error occurs.
     */
    public void setCursorName(String name) throws SQLException {
	// noop for now
    }
    /**
     * If escape scanning is on (the default), the driver will do
     * escape substitution before sending the SQL to the database.
     *
     * Note: Since prepared statements have usually been parsed prior
     * to making this call, disabling escape processing for prepared
     * statements will like have no affect.
     *
     * @param enable true to enable; false to disable
     * @exception SQLException if a database-access error occurs.
     */
    public void setEscapeProcessing(boolean enable) throws SQLException {
    }
    //--------------------------JDBC 2.0-----------------------------

    /**
     * JDBC 2.0
     *
     * Gives the driver a hint as to the direction in which
     * the rows in a result set
     * will be processed. The hint applies only to result sets created 
     * using this Statement object.  The default value is 
     * ResultSet.FETCH_FORWARD.
     * <p>Note that this method sets the default fetch direction for 
     * result sets generated by this <code>Statement</code> object.
     * Each result set has its own methods for getting and setting
     * its own fetch direction.
     * @param direction the initial direction for processing rows
     * @exception SQLException if a database access error occurs
     * or the given direction
     * is not one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or
     * ResultSet.FETCH_UNKNOWN
     */
    public void setFetchDirection(int direction) throws SQLException {
    }
    /**
     * JDBC 2.0
     *
     * Gives the JDBC driver a hint as to the number of rows that should 
     * be fetched from the database when more rows are needed.  The number 
     * of rows specified affects only result sets created using this 
     * statement. If the value specified is zero, then the hint is ignored.
     * The default value is zero.
     *
     * @param rows the number of rows to fetch
     * @exception SQLException if a database access error occurs, or the
     * condition 0 <= rows <= this.getMaxRows() is not satisfied.
     */
    public void setFetchSize(int rows) throws SQLException {
    }
    /**
     * The maxFieldSize limit (in bytes) is set to limit the size of
     * data that can be returned for any column value; it only applies
     * to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and
     * LONGVARCHAR fields.  If the limit is exceeded, the excess data
     * is silently discarded. For maximum portability use values
     * greater than 256.
     *
     * @param max the new max column size limit; zero means unlimited 
     * @exception SQLException if a database-access error occurs.
     */
    public void setMaxFieldSize(int max) throws SQLException {
    }
    /**
     * The maxRows limit is set to limit the number of rows that any
     * ResultSet can contain.  If the limit is exceeded, the excess
     * rows are silently dropped.
     *
     * @param max the new max rows limit; zero means unlimited 
     * @exception SQLException if a database-access error occurs.
     */
    public void setMaxRows(int max) throws SQLException {
    }
    /**
     * The queryTimeout limit is the number of seconds the driver will
     * wait for a Statement to execute. If the limit is exceeded, a
     * SQLException is thrown.
     *
     * @param seconds the new query timeout limit in seconds; zero means unlimited 
     * @exception SQLException if a database-access error occurs.
     */
    public void setQueryTimeout(int seconds) throws SQLException {
    }

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
}
