/*
 * AcmeOrderWindow.java
 *
 * Created on February 20, 2008, 9:07 AM
 */

package acmegardening;

import java.sql.*;
import java.util.ArrayList; 
import javax.swing.table.*; 
import javax.swing.*; 
/**
 *
 * @author  bdavis
 */
public class AcmeOrderWindow extends javax.swing.JDialog {
    AcmeCustomer customer;
    Connection conn; 
    ArrayList<AcmeItem> items;
            
    /** Creates new form AcmeOrderWindow */
    public AcmeOrderWindow(java.awt.Frame parent, boolean modal, 
            AcmeCustomer c, Connection conn) {
        super(parent, modal);
        initComponents();
        
        this.conn = conn; 
        customer = c; 
        lName.setText(c.getLastName() + "," + c.getFirstName());

        try {
            items = AcmeDataAdapter.getItems(conn);
            DefaultTableModel m = (DefaultTableModel)tableItems.getModel();
            
            for (int i=0; i<items.size(); i++) 
            {
                m.addRow(new Object [] {
                    items.get(i).getItemNo(),
                    items.get(i).getName(), 
                    "$"+items.get(i).getPrice() });
               
            }
                    
            //m.setValueAt(new JTextField("Text"), WIDTH, WIDTH);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),
                    "Connection Error ", JOptionPane.ERROR_MESSAGE);
        }
   
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItems = new javax.swing.JTable();
        bOrder = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Name:");

        lName.setText("Davis, Bill");

        tableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item #", "Item Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableItems);

        bOrder.setText("Buy");
        bOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrderActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(210, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(268, Short.MAX_VALUE)
                .addComponent(bOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCancel)
                    .addComponent(bOrder))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        try {
            if (!AcmeDataAdapter.orderExistsForCustomer(conn, 
                    customer.getCustomerID())) {
                AcmeDataAdapter.deleteCustomer(conn, customer.getLastName(), 
                        customer.getFirstName());
                    
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),
                    "Connection Error ", JOptionPane.ERROR_MESSAGE);
        }
        String message = "<html>Thank You.<br/>Come Again.</html>";
 
        new JOptionPane(new JLabel(message)).createDialog(null, 
                "Order Cancelled").setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_bCancelActionPerformed

    private void bOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrderActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tableItems.getModel();
        int rows = dtm.getRowCount();
        String message = "";
        for (int i = 0; i < rows; i++) {
            int item_no = (Integer) dtm.getValueAt(i, 0);
            if (dtm.getValueAt(i, 3) == null) {
                continue;
            }
            String q_string = dtm.getValueAt(i, 3).toString();
            if (!q_string.equals("")) {

                try {
                    int qty = Integer.parseInt(q_string);

                    AcmeOrder o = new AcmeOrder(customer, items.get(i), qty);

                    AcmeOrder o2 = AcmeDataAdapter.findOrder(conn,
                            customer, items.get(i));

                    if (o2 != null) {
                        o2.quantity += qty;
                        message += qty + " " + items.get(i).getName() +
                                " (for a total of " + o2.quantity + ")";
                        AcmeDataAdapter.updateOrder(conn, customer,
                                o.getItem(), o2.quantity);
                    } else {
                        message += qty + " " + items.get(i).getName();
                        AcmeDataAdapter.addOrder(conn, o);
                    }
                    message += "<br/>";
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null,
                            "Did you enter a number? " + e.getMessage(),
                            "Number Format Error ", JOptionPane.ERROR_MESSAGE);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(),
                            "Connection Error ", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
        if (message.equals(""))
            message="<html>You didn't order anything "; 
        else { 
            message = "<html>You ordered <br/>" + message; 
        }
        message +=   "<br/>Thank you. Come again.</html>"; 
        new JOptionPane(new JLabel(message)).createDialog(null,
                "Order Entered").setVisible(true);
    
        this.dispose();
        
    }//GEN-LAST:event_bOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AcmeOrderWindow dialog = new AcmeOrderWindow(new javax.swing.JFrame(),
                        true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lName;
    private javax.swing.JTable tableItems;
    // End of variables declaration//GEN-END:variables
    
}
